apply plugin:'java'
apply plugin:'idea'


project.ext {
    springVersion = "4.0.3.RELEASE"
    neo4jVersion = "2.0.1.RELEASE"
    springDataGraphVersion = "3.0.1.RELEASE"
    aspectjVersion = "1.7.4"

    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    version = '1.0'
}

configurations {
    runtime
    testCompile
    ajtools
    aspectpath
}

repositories {
        maven {
            url "http://m2.neo4j.org/content/repositories/releases/"
        }
        mavenCentral()
        mavenLocal()
    }

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.6'

    compile "org.springframework:spring-context:${springVersion}"
    compile "org.neo4j:neo4j:${neo4jVersion}"
    // Provides Repository based Object <-> Graph Mapping
    compile "javax.validation:validation-api:1.0.0.GA"
    compile "org.springframework.data:spring-data-neo4j-aspects:${springDataGraphVersion}"
    compile 'javax.persistence:persistence-api:1.0-rev-1'


    testCompile 'junit:junit-dep:4.11'
    testCompile "org.springframework:spring-test:${springVersion}"
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    // Access to Neo4j testing facilities: TestGraphDatabaseFactory
    testCompile "org.neo4j:neo4j-kernel:${neo4jVersion}:tests@jar"
    testRuntime 'org.slf4j:slf4j-simple:1.7.5'

    //aspectj dependencies
    ajtools "org.aspectj:aspectjtools:${aspectjVersion}"
    compile "org.aspectj:aspectjrt:${aspectjVersion}"
    aspectpath group: "org.springframework.data", name: "spring-data-neo4j", version: springDataGraphVersion
}


task compileJava(overwrite: true, description: 'Compiles AspectJ Source', type: Ajc) {
    project.ext.sourceSet = sourceSets.main
    inputs.files(sourceSet.java.srcDirs)
    outputs.dir(sourceSet.output.classesDir)
    project.ext.aspectPath = configurations.aspectpath
}

task compileTestJava(overwrite: true, description: 'Compiles AspectJ Test Source', type: Ajc) {
    project.ext.sourceSet = sourceSets.test
    inputs.files(sourceSet.java.srcDirs)
    outputs.dir(sourceSet.output.classesDir)
    project.ext.aspectPath = files(configurations.aspectpath, jar.archivePath)
}

compileJava.dependsOn(processResources)
compileTestJava.dependsOn(processTestResources,compileJava,jar)

class Ajc extends DefaultTask {
    Ajc() {
        logging.captureStandardOutput(LogLevel.INFO)
    }

    @TaskAction
    def compile() {
        logger.info "Running ajc ..."

        ant.taskdef(resource: "org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties", classpath: project.configurations.ajtools.asPath)
        ant.iajc(classpath: project.ext.sourceSet.compileClasspath.asPath, fork: 'true', destDir: project.ext.sourceSet.classesDir.absolutePath,
                source: project.ext.sourceCompatibility,
                target: project.ext.targetCompatibility,
                aspectPath: project.ext.aspectPath.asPath, sourceRootCopyFilter: '**/*.java', showWeaveInfo: 'true', Xlint: "ignore") {
            sourceroots {
                project.ext.sourceSet.java.srcDirs.each {
                    pathelement(location: it.absolutePath)
                }
            }
        }
    }
}
// Generate wrapper for Gradle
task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}